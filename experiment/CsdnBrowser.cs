using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Windows.Forms;

namespace experiment
{
    class CsdnBrowser : WebBrowser
    {
        Timer m_timerAfterDocCompleted = null;

        public CsdnBrowser()
        {
            // This flag make script error dlg disappear.
            this.ScriptErrorsSuppressed = false;

            this.DocumentCompleted += new WebBrowserDocumentCompletedEventHandler(browser_DocumentCompleted);
        }

        #region Overrides

        /// <summary>
        /// Override to allow custom script error handling.
        /// </summary>
        /// <returns></returns>
        protected override WebBrowserSiteBase CreateWebBrowserSiteBase()
        {
            return new WebBrowserSiteEx(this);
        }

        #endregion

        #region Inner Class [WebBrowserSiteEx]

        /// <summary>
        /// Sub-class to allow custom script error handling.
        /// </summary>
        protected class WebBrowserSiteEx : WebBrowserSite, NativeMethods.IOleCommandTarget
        {
            /// <summary>
            /// Default constructor.
            /// </summary>
            public WebBrowserSiteEx(CsdnBrowser webBrowser)
                : base(webBrowser)
            {
            }

            /// <summary>Queries the object for the status of one or more commands generated by user interface events.</summary>
            /// <param name="pguidCmdGroup">The GUID of the command group.</param>
            /// <param name="cCmds">The number of commands in <paramref name="prgCmds" />.</param>
            /// <param name="prgCmds">An array of OLECMD structures that indicate the commands for which the caller needs status information. This method fills the <paramref name="cmdf" /> member of each structure with values taken from the OLECMDF enumeration.</param>
            /// <param name="pCmdText">An OLECMDTEXT structure in which to return name and/or status information of a single command. This parameter can be null to indicate that the caller does not need this information.</param>
            /// <returns>This method returns S_OK on success. Other possible return values include the following.
            /// E_FAIL The operation failed.
            /// E_UNEXPECTED An unexpected error has occurred.
            /// E_POINTER The <paramref name="prgCmds" /> argument is null.
            /// OLECMDERR_E_UNKNOWNGROUP The <paramref name="pguidCmdGroup" /> parameter is not null but does not specify a recognized command group.</returns>
            public int QueryStatus(ref Guid pguidCmdGroup, int cCmds, NativeMethods.OLECMD prgCmds, IntPtr pCmdText)
            {
                if ((int)NativeMethods.OLECMDID.OLECMDID_SHOWSCRIPTERROR == prgCmds.cmdID)
                {   // Do nothing (suppress script errors)
                    return NativeMethods.S_OK;
                }

                // Indicate that command is unknown. The command will then be handled by another IOleCommandTarget.
                return NativeMethods.OLECMDERR_E_UNKNOWNGROUP;
            }

            /// <summary>Executes the specified command.</summary>
            /// <param name="pguidCmdGroup">The GUID of the command group.</param>
            /// <param name="nCmdID">The command ID.</param>
            /// <param name="nCmdexecopt">Specifies how the object should execute the command. Possible values are taken from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT" /> and <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDID_WINDOWSTATE_FLAG" /> enumerations.</param>
            /// <param name="pvaIn">The input arguments of the command.</param>
            /// <param name="pvaOut">The output arguments of the command.</param>
            /// <returns>This method returns S_OK on success. Other possible return values include 
            /// OLECMDERR_E_UNKNOWNGROUP The <paramref name="pguidCmdGroup" /> parameter is not null but does not specify a recognized command group.
            /// OLECMDERR_E_NOTSUPPORTED The <paramref name="nCmdID" /> parameter is not a valid command in the group identified by <paramref name="pguidCmdGroup" />.
            /// OLECMDERR_E_DISABLED The command identified by <paramref name="nCmdID" /> is currently disabled and cannot be executed.
            /// OLECMDERR_E_NOHELP The caller has asked for help on the command identified by <paramref name="nCmdID" />, but no help is available.
            /// OLECMDERR_E_CANCELED The user canceled the execution of the command.</returns>
            public int Exec(ref Guid pguidCmdGroup, int nCmdID, int nCmdexecopt, object[] pvaIn, int pvaOut)
            {
                if ((int)NativeMethods.OLECMDID.OLECMDID_SHOWSCRIPTERROR == nCmdID)
                {   // Do nothing (suppress script errors)
                    return NativeMethods.S_OK;
                }

                // Indicate that command is unknown. The command will then be handled by another IOleCommandTarget.
                return NativeMethods.OLECMDERR_E_UNKNOWNGROUP;
            }
        }

        #endregion

        public void SetTimer(Timer timerAfterDocCompleted)
        {
            m_timerAfterDocCompleted = timerAfterDocCompleted;

            m_timerAfterDocCompleted.Enabled = false;
            m_timerAfterDocCompleted.Interval = 3000;
        }

        public void NavigateToLoginPage()
        {
            Tools.CloseSecurityAlert();
            this.Navigate("https://passport.csdn.net/account/login");  
        }

        private HtmlElement GetEleByTagAndOuterHtml(string tag,string html)
        {
            HtmlElementCollection collection = this.Document.GetElementsByTagName(tag);
            foreach (HtmlElement ele in collection)
            {
                if (ele.OuterHtml.Contains(html))
                {
                    return ele;
                }
            }
            return null;
        }

        private void ClickEleByTagAndOuterHtml(string tag,string html)
        {
            Tools.SafeClick(GetEleByTagAndOuterHtml(tag, html));
        }

        private void ClickAccountLogin()
        {
            ClickEleByTagAndOuterHtml("a", "账号登录");
        }

        public void ClickLogin()
        {
            ClickEleByTagAndOuterHtml("a", "https://passport.csdn.net/account/login");
        }

        // do not show scriptError dlg. But seems does not work
        private void Window_Error(object sender, HtmlElementErrorEventArgs e)
        {
            e.Handled = true;
        }

        private void browser_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
        {
            Tools.CloseSecurityAlert();
            m_timerAfterDocCompleted.Enabled = true;

            ((WebBrowser)sender).Document.Window.Error += new HtmlElementErrorEventHandler(Window_Error);
        }

        public void timerAfterDocCompleted()
        {            
            Tools.CloseSecurityAlert();
            m_timerAfterDocCompleted.Enabled = false;
        }

        public bool IsLogedin()
        {
            if (GetEleByTagAndOuterHtml("img", "login_img") != null)
                return true;
            return false;
        }

        public bool Login(string uName,string password)
        {
            ClickAccountLogin();

            HtmlElement ele = this.Document.GetElementById("username");
            if (ele == null)
            {
                Log.WriteLog(LogType.Error, "did not found ele username");
                return false;
            }
            ele.SetAttribute("value", uName);

            ele = this.Document.GetElementById("password");
            if (ele == null)
            {
                Log.WriteLog(LogType.Error, "did not found ele password");
                return false;
            }
            ele.SetAttribute("value", password);

            ClickEleByTagAndOuterHtml("input", "登 录");
            Log.WriteLog(LogType.Trace, "logged in with username " + uName + " password " + password);
            return true;
        }

        public void Logout()
        {
            ClickEleByTagAndOuterHtml("a", "退出");
            NavigateToLoginPage();
        }
    }
}
